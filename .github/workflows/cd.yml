# Continuous Deployment Workflow
# Handles deployment to GHCR and other environments

name: CD - Deploy

# Trigger only on successful CI completion and main branch pushes
on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    types:
      - completed
    branches:
      - main

# Define deployment environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend-jd-analyzer
  NODE_VERSION: 20

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    # Only run if CI workflow completed successfully
    if: github.event.workflow_run.conclusion == 'success'
    
    outputs:
      # Pass the SHA to other jobs
      sha: ${{ github.event.workflow_run.head_sha }}
      
    steps:
      # Basic validation step
      - name: ‚úÖ Validate deployment conditions
        run: |
          echo "CI workflow completed successfully"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Ready for deployment!"

  # Build and push Docker image to GHCR
  docker-deploy:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: pre-deploy
    
    # Set deployment permissions
    permissions:
      contents: read
      packages: write
      
    steps:
      # Step 1: Checkout the specific commit that triggered the workflow
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deploy.outputs.sha }}

      # Step 2: Download build artifacts from CI workflow
      - name:  Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ needs.pre-deploy.outputs.sha }}
          path: dist/
          # Download from the specific workflow run
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      # Step 3: Set up Docker Buildx for advanced building features
      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use advanced features like caching
          driver-opts: network=host

      # Step 4: Login to GitHub Container Registry
      - name:  Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Extract metadata for Docker tags and labels
      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag with 'latest' for main branch
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with short SHA
            type=sha,prefix={{branch}}-
            # Tag with timestamp
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=JD Analyzer Frontend
            org.opencontainers.image.description=Job Description Analyzer Frontend Application
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      # Step 6: Build and push Docker image
      - name: üöÄ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Use the Dockerfile in the repo root
          file: ./Dockerfile
          # Build for multiple platforms
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build caching for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build arguments (if needed)
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ needs.pre-deploy.outputs.sha }}

      

 