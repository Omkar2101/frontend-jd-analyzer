# # Frontend CI/CD Workflow for React/Vite

# name: Frontend CI/CD

# on:
#   push:
#     branches: [ main,ui ,feature/localstorage-update]
#   pull_request:
#     branches: [ main,ui ,feature/localstorage-update]

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the repository code
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Set up Node.js 20
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       # Install npm dependencies
#       - name: Install dependencies
#         run: npm ci

#       # Run tests with coverage using Vitest
#       - name: Run tests
#         run: npm run test:coverage

#       # Build the production-ready frontend
#       - name: Build
#         run: npm run build

#       # Upload the build output as an artifact
#       - name: Upload production-ready build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: frontend-build
#           path: dist

#       # Build the Docker image for the frontend
#       - name: Build Docker image
#         run: |
#           docker build -t frontend-jd-analyzer:latest .

#   deploy:
#     needs: build-and-test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     steps:
#       # Download the build artifact from the previous job
#       - name: Download build artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: frontend-build
#           path: dist

#       # Example: Deploy to GitHub Pages (or replace with your own deployment step)
#       - name: Deploy to GitHub Pages
#         uses: peaceiris/actions-gh-pages@v4
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           publish_dir: ./dist
#           publish_branch: gh-pages

#       # For custom server deployment, replace above with your deployment script or action

# Frontend CI/CD Workflow for React/Vite with GHCR Deployment

name: Frontend CI/CD

on:
  push:
    branches: [ main, ui, feature/localstorage-update,cd ]
  pull_request:
    branches: [ main, ui, feature/localstorage-update,cd ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js 20
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Run tests with coverage using Vitest
      - name: Run tests
        run: npm run test:coverage

      # Build the production-ready frontend
      - name: Build
        run: npm run build

      # Upload the build output as an artifact
      - name: Upload production-ready build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Download the build artifact from the previous job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-test, build-and-push-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      # Download the build artifact from the build job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages

     
